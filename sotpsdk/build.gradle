apply plugin: 'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion '26.0.2'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    testCompile 'junit:junit:4.12'
    compile files('libs/PMDCCode-2.2.0.jar')
    compile files('libs/jar/sotpsdk.jar')
}

task deleteJar(type: Delete) {
    delete 'build/SotpClientCommon.jar'
}
task makeJar(type: Jar) {
    from zipTree(file('build/intermediates/bundles/release/classes.jar'))
//    from fileTree(dir: 'src/main',includes: ['assets/**'])//将assets目录打入jar包
    baseName 'SotpClientCommon'
    destinationDir = file('build/')
}
makeJar.dependsOn(deleteJar, build)

//
//task buildJar(type: Jar, dependsOn: ['assembleRelease']) {
//    destinationDir = file('libs/jar/')
////    appendix = "yh" // SDK的后缀名称
//    baseName = "sotpsdk" // SDK名称
////    version = "1.0" // 这个常量是在gradle.properties中配置的
//
//    // manifest信息
//    def map = ['Version': "1.0",
//               'Gradle' : project.gradle.gradleVersion,
//               'Vendor' : '',
//               'Date'   : new Date().getDateTimeString()
//    ]
//    manifest.attributes(map)
//
//    from('build/intermediates/classes/release/')
//
//    exclude('android')
//    exclude('**/BuildConfig.class')
//    exclude('**/BuildConfig\$*.class')
//    exclude('**/R.class')
//    exclude('**/R\$*.class')
//    include('**/*.class')
//
//}
import com.android.build.gradle.AppPlugin
import proguard.gradle.ProGuardTask
//dependsOn 可根据实际需要增加或更改
task buildJar(dependsOn: ['compileReleaseJavaWithJavac'], type: Jar) {

//    appendix = "demo"
    baseName = "MDCCode"
    version = "2.2.0"
//    classifier = "release"

    //后缀名
    extension = "jar"
    //最终的 Jar 包名，如果没设置，默认为 [baseName]-[appendix]-[version]-[classifier].[extension]
//    archiveName = "MDCCode.jar"

    //需打包的资源所在的路径集
    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
    //初始化资源路径集
    from srcClassDir

    //去除路径集下部分的资源
    exclude "com/topcode/mdccodesdk/MainActivity.class"
    exclude "com/topcode/mdccodesdk/MainActivity\$*.class"
    exclude "com/topcode/mdccodesdk/BuildConfig.class"
    exclude "com/topcode/mdccodesdk/BuildConfig\$*.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"

    //只导入资源路径集下的部分资源
    include "com/**/*.class"

    //注: exclude include 支持可变长参数
}

task proguardJar(dependsOn: ['buildJar'], type: ProGuardTask) {
    //Android 默认的 proguard 文件
    configuration android.getDefaultProguardFile('proguard-android.txt')
    //会根据该文件对 Jar 进行混淆，注意：需要在 manifest 注册的组件也要加入该文件中
    configuration 'proguard-rules.pro'

    String inJar = buildJar.archivePath.getAbsolutePath()
    //输入 jar
    injars inJar
    //输出 jar
    outjars inJar.substring(0, inJar.lastIndexOf(File.separator)) + "/P${buildJar.archiveName}"

    //设置不删除未引用的资源(类，方法等)
    dontshrink

    AppPlugin appPlugin = getPlugins().findPlugin(AppPlugin)
    if (appPlugin != null) {
        List<String> runtimeJarList
        if (appPlugin.getMetaClass().getMetaMethod("getRuntimeJarList")) {
            runtimeJarList = appPlugin.getRuntimeJarList()
        } else if (android.getMetaClass().getMetaMethod("getBootClasspath")) {
            runtimeJarList = android.getBootClasspath()
        } else {
            runtimeJarList = appPlugin.getBootClasspath()
        }

        for (String runtimeJar : runtimeJarList) {
            //给 proguard 添加 runtime
            libraryjars(runtimeJar)
        }
    }
}